{"version":3,"sources":["components/RichTextEditor.js","App.js","serviceWorker.js","index.js"],"names":["RichTextEditor","props","highlightCallBack","document","querySelectorAll","forEach","block","hljs","highlightBlock","displayTeX","tex","listHTML","i","length","getElementById","innerHTML","state","editorState","EditorState","createEmpty","editorRef","React","createRef","focus","current","onChange","setState","handleKeyCommand","_handleKeyCommand","bind","mapKeyToEditorCommand","_mapKeyToEditorCommand","toggleBlockType","_toggleBlockType","toggleInlineStyle","_toggleInlineStyle","this","command","newState","RichUtils","e","keyCode","getDefaultKeyBinding","newEditorState","onTab","blockType","inlineStyle","contentState","getCurrentContent","editorContentRaw","convertToRaw","console","log","allTeX","offset","someTeX","blocks","k","TeX","oSort","someTeXInlineStyleSort","inlineStyleRanges","o","push","sort","a","b","item","texMap","type","text","x","p","q","style","slice","className","hasText","getBlockMap","first","getType","onClick","convertToTeX","onToggle","blockStyleFn","getBlockStyle","customStyleMap","styleMap","keyBindingFn","placeholder","ref","spellCheck","id","Component","CODE","backgroundColor","fontFamily","fontSize","padding","StyleButton","preventDefault","active","onMouseDown","label","BLOCK_TYPES","BlockStyleControls","selection","getSelection","getBlockForKey","getStartKey","map","key","INLINE_STYLES","InlineStyleControls","currentStyle","getCurrentInlineStyle","has","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a41b2ad2.chunk.js","sourcesContent":["import React from 'react';\nimport {Editor, EditorState, getDefaultKeyBinding, RichUtils, convertToRaw} from 'draft-js';\nimport './RichTextEditor.css';\nimport '../../node_modules/draft-js/dist/Draft.css';\nimport hljs from 'highlight.js'\nimport 'highlight.js/styles/monokai.css'\n\nclass RichTextEditor extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {editorState: EditorState.createEmpty()};\n\t\tthis.editorRef = React.createRef();\n\t\tthis.focus = () => this.editorRef.current.focus();\n\t\tthis.onChange = (editorState) => this.setState({editorState});\n\n\t\tthis.handleKeyCommand = this._handleKeyCommand.bind(this);\n\t\tthis.mapKeyToEditorCommand = this._mapKeyToEditorCommand.bind(this);\n\t\tthis.toggleBlockType = this._toggleBlockType.bind(this);\n\t\tthis.toggleInlineStyle = this._toggleInlineStyle.bind(this);\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.highlightCallBack()\n\t}\n\n\tcomponentDidUpdate() {\n\t\tthis.highlightCallBack()\n\t}\n\n\thighlightCallBack = () => {\n\t\tdocument.querySelectorAll('pre code')\n\t\t\t.forEach(block => hljs.highlightBlock(block))\n\t}\n\n\t_handleKeyCommand(command, editorState) {\n\t\tconst newState = RichUtils.handleKeyCommand(editorState, command);\n\t\tif (newState) {\n\t\t\tthis.onChange(newState);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t_mapKeyToEditorCommand(e) {\n\t\tif (e.keyCode === 9 /* TAB */) {\n\t\t\tconst newEditorState = RichUtils.onTab(\n\t\t\t\te,\n\t\t\t\tthis.state.editorState,\n\t\t\t\t4, /* maxDepth */\n\t\t\t);\n\t\t\tif (newEditorState !== this.state.editorState) {\n\t\t\t\tthis.onChange(newEditorState);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\treturn getDefaultKeyBinding(e);\n\t}\n\n\t_toggleBlockType(blockType) {\n\t\tthis.onChange(\n\t\t\tRichUtils.toggleBlockType(\n\t\t\t\tthis.state.editorState,\n\t\t\t\tblockType\n\t\t\t)\n\t\t);\n\t}\n\n\t_toggleInlineStyle(inlineStyle) {\n\t\tthis.onChange(\n\t\t\tRichUtils.toggleInlineStyle(\n\t\t\t\tthis.state.editorState,\n\t\t\t\tinlineStyle\n\t\t\t)\n\t\t);\n\t}\n\n\tconvertToTeX() {\n\t\tconst contentState = this.state.editorState.getCurrentContent();\n\t\tconst editorContentRaw = convertToRaw(contentState);\n\t\tconsole.log(editorContentRaw);\n\n\t\tlet allTeX = [], offset = 0, someTeX = editorContentRaw.blocks\n\n\t\tfor (let k = 0; k < someTeX.length; k++) {\n\t\t\tlet TeX = []\n\t\t\tlet oSort = [], someTeXInlineStyleSort = [];\n\n\t\t\tfor (let i = 0; i < someTeX[k].inlineStyleRanges.length; i++) {\n\t\t\t\tlet o = someTeX[k].inlineStyleRanges[i].offset;\n\t\t\t\toSort.push(o);\n\t\t\t}\n\t\t\toSort.sort((a, b) => a - b);\n\n\t\t\tfor (let i = 0; i < oSort.length; i++) {\n\t\t\t\tfor (let item in someTeX[k].inlineStyleRanges) {\n\t\t\t\t\tif (someTeX[k].inlineStyleRanges[item].offset === oSort[i]) {\n\t\t\t\t\t\tsomeTeXInlineStyleSort.push(someTeX[k].inlineStyleRanges[item]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (someTeX[k].inlineStyleRanges.length === 0) {\n\t\t\t\tTeX.push(texMap[someTeX[k].type] + '{' + someTeX[k].text + '}<br/>')\n\t\t\t} else {\n\t\t\t\t// TODO leetcode-like problem\n\n\t\t\t\tfor (let i = 0; i < someTeXInlineStyleSort.length; i++) {\n\t\t\t\t\tlet x = oSort[i];\n\t\t\t\t\tlet p = someTeXInlineStyleSort[i].length;\n\t\t\t\t\tlet q = someTeXInlineStyleSort[i].style;\n\n\t\t\t\t\tif (i === 0) {\n\t\t\t\t\t\tTeX.push(someTeX[k].text.slice(0, x));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tTeX.push(someTeX[k].text.slice(offset + 1, x));\n\t\t\t\t\t}\n\t\t\t\t\tTeX.push(texMap[q] + '{' + someTeX[k].text.slice(x, x + p) + '}');\n\n\t\t\t\t\tif (i === someTeXInlineStyleSort.length - 1) {\n\t\t\t\t\t\tTeX.push(someTeX[k].text.slice(-(someTeX[k].text.length - x - p)) + '<br/>');\n\t\t\t\t\t}\n\t\t\t\t\toffset = x;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tallTeX.push(TeX)\n\t\t}\n\n\t\tthis.displayTeX(allTeX)\n\t}\n\n\tdisplayTeX = (tex) => {\n\t\tlet listHTML = '<pre><code class=\"latex\">';\n\t\tfor (let i = 0; i < tex.length; i++) {\n\t\t\tlet note = tex[i];\n\t\t\tlistHTML += note;\n\t\t}\n\t\tlistHTML += '</code></pre>';\n\t\tdocument.getElementById('tex').innerHTML = listHTML;\n\t}\n\n\trender() {\n\t\tconst {editorState} = this.state;\n\n\t\t// If the user changes block type before entering any text, we can\n\t\t// either style the placeholder or hide it. Let's just hide it now.\n\t\tlet className = 'RichEditor-editor';\n\t\tlet contentState = editorState.getCurrentContent();\n\t\tif (!contentState.hasText()) {\n\t\t\tif (contentState.getBlockMap().first().getType() !== 'unstyled') {\n\t\t\t\tclassName += ' RichEditor-hidePlaceholder';\n\t\t\t}\n\t\t}\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className=\"RichEditor-root\">\n\t\t\t\t\t<button onClick={this.convertToTeX.bind(this)}>Display</button>\n\t\t\t\t\t<BlockStyleControls\n\t\t\t\t\t\teditorState={editorState}\n\t\t\t\t\t\tonToggle={this.toggleBlockType}\n\t\t\t\t\t/>\n\t\t\t\t\t<InlineStyleControls\n\t\t\t\t\t\teditorState={editorState}\n\t\t\t\t\t\tonToggle={this.toggleInlineStyle}\n\t\t\t\t\t/>\n\t\t\t\t\t<div className={className} onClick={this.focus}>\n\t\t\t\t\t\t<Editor\n\t\t\t\t\t\t\tblockStyleFn={getBlockStyle}\n\t\t\t\t\t\t\tcustomStyleMap={styleMap}\n\t\t\t\t\t\t\teditorState={editorState}\n\t\t\t\t\t\t\thandleKeyCommand={this.handleKeyCommand}\n\t\t\t\t\t\t\tkeyBindingFn={this.mapKeyToEditorCommand}\n\t\t\t\t\t\t\tonChange={this.onChange}\n\t\t\t\t\t\t\tplaceholder=\"Tell a story...\"\n\t\t\t\t\t\t\tref={this.editorRef}\n\t\t\t\t\t\t\tspellCheck={true}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div\n\t\t\t\t\tid='tex'\n\t\t\t\t></div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nconst texMap = {\n\t'header-one': '\\\\section',\n\t'header-two': '\\\\subsection',\n\t'header-three': '\\\\subsubsection',\n\t'header-four': '\\\\subsubsubsection',\n\t'BOLD': '\\\\textbf',\n\t'ITALIC': '\\\\textit',\n};\n\n// Custom overrides for \"code\" style.\nconst styleMap = {\n\tCODE: {\n\t\tbackgroundColor: 'rgba(0, 0, 0, 0.05)',\n\t\tfontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\n\t\tfontSize: 16,\n\t\tpadding: 2,\n\t},\n};\n\nfunction getBlockStyle(block) {\n\tswitch (block.getType()) {\n\t\tcase 'blockquote':\n\t\t\treturn 'RichEditor-blockquote';\n\t\tdefault:\n\t\t\treturn null;\n\t}\n}\n\nclass StyleButton extends React.Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.onToggle = (e) => {\n\t\t\te.preventDefault();\n\t\t\tthis.props.onToggle(this.props.style);\n\t\t};\n\t}\n\n\trender() {\n\t\tlet className = 'RichEditor-styleButton';\n\t\tif (this.props.active) {\n\t\t\tclassName += ' RichEditor-activeButton';\n\t\t}\n\n\t\treturn (\n\t\t\t<span className={className} onMouseDown={this.onToggle}>\n        {this.props.label}\n      </span>\n\t\t);\n\t}\n}\n\nconst BLOCK_TYPES = [\n\t{label: 'H1', style: 'header-one'},\n\t{label: 'H2', style: 'header-two'},\n\t{label: 'H3', style: 'header-three'},\n\t{label: 'H4', style: 'header-four'},\n\t// {label: 'H5', style: 'header-five'},\n\t// {label: 'H6', style: 'header-six'},\n\t// {label: 'Blockquote', style: 'blockquote'},\n\t// {label: 'UL', style: 'unordered-list-item'},\n\t// {label: 'OL', style: 'ordered-list-item'},\n\t// {label: 'Code Block', style: 'code-block'},\n];\n\nconst BlockStyleControls = (props) => {\n\tconst {editorState} = props;\n\tconst selection = editorState.getSelection();\n\tconst blockType = editorState\n\t\t.getCurrentContent()\n\t\t.getBlockForKey(selection.getStartKey())\n\t\t.getType();\n\n\treturn (\n\t\t<div className=\"RichEditor-controls\">\n\t\t\t{BLOCK_TYPES.map((type) =>\n\t\t\t\t<StyleButton\n\t\t\t\t\tkey={type.label}\n\t\t\t\t\tactive={type.style === blockType}\n\t\t\t\t\tlabel={type.label}\n\t\t\t\t\tonToggle={props.onToggle}\n\t\t\t\t\tstyle={type.style}\n\t\t\t\t/>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\nconst INLINE_STYLES = [\n\t{label: 'Bold', style: 'BOLD'},\n\t{label: 'Italic', style: 'ITALIC'},\n\t// {label: 'Underline', style: 'UNDERLINE'},\n\t// {label: 'Monospace', style: 'CODE'},\n];\n\nconst InlineStyleControls = (props) => {\n\tconst currentStyle = props.editorState.getCurrentInlineStyle();\n\n\treturn (\n\t\t<div className=\"RichEditor-controls\">\n\t\t\t{INLINE_STYLES.map((type) =>\n\t\t\t\t<StyleButton\n\t\t\t\t\tkey={type.label}\n\t\t\t\t\tactive={currentStyle.has(type.style)}\n\t\t\t\t\tlabel={type.label}\n\t\t\t\t\tonToggle={props.onToggle}\n\t\t\t\t\tstyle={type.style}\n\t\t\t\t/>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\nexport default RichTextEditor;","import React from 'react';\nimport './App.css';\nimport RichTextEditor from './components/RichTextEditor';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <RichTextEditor />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}